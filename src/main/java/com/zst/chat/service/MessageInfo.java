/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.zst.chat.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-06-29")
public class MessageInfo implements org.apache.thrift.TBase<MessageInfo, MessageInfo._Fields>, java.io.Serializable, Cloneable, Comparable<MessageInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MessageInfo");

  private static final org.apache.thrift.protocol.TField SEQ_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("seqNo", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField EMOJI_FIELD_DESC = new org.apache.thrift.protocol.TField("emoji", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField IMAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("image", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("file", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField SRC_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("srcUserId", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField DST_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dstUserId", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField IS_GROUP_CHAT_FIELD_DESC = new org.apache.thrift.protocol.TField("isGroupChat", org.apache.thrift.protocol.TType.BOOL, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MessageInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MessageInfoTupleSchemeFactory();

  public long seqNo; // required
  /**
   * 
   * @see MessageType
   */
  public MessageType type; // required
  public String message; // optional
  public String emoji; // optional
  public java.nio.ByteBuffer image; // optional
  public java.nio.ByteBuffer file; // optional
  public int srcUserId; // required
  public int dstUserId; // required
  public boolean isGroupChat; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SEQ_NO((short)1, "seqNo"),
    /**
     * 
     * @see MessageType
     */
    TYPE((short)2, "type"),
    MESSAGE((short)3, "message"),
    EMOJI((short)4, "emoji"),
    IMAGE((short)5, "image"),
    FILE((short)6, "file"),
    SRC_USER_ID((short)7, "srcUserId"),
    DST_USER_ID((short)8, "dstUserId"),
    IS_GROUP_CHAT((short)9, "isGroupChat");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SEQ_NO
          return SEQ_NO;
        case 2: // TYPE
          return TYPE;
        case 3: // MESSAGE
          return MESSAGE;
        case 4: // EMOJI
          return EMOJI;
        case 5: // IMAGE
          return IMAGE;
        case 6: // FILE
          return FILE;
        case 7: // SRC_USER_ID
          return SRC_USER_ID;
        case 8: // DST_USER_ID
          return DST_USER_ID;
        case 9: // IS_GROUP_CHAT
          return IS_GROUP_CHAT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SEQNO_ISSET_ID = 0;
  private static final int __SRCUSERID_ISSET_ID = 1;
  private static final int __DSTUSERID_ISSET_ID = 2;
  private static final int __ISGROUPCHAT_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.MESSAGE,_Fields.EMOJI,_Fields.IMAGE,_Fields.FILE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SEQ_NO, new org.apache.thrift.meta_data.FieldMetaData("seqNo", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MessageType.class)));
    tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMOJI, new org.apache.thrift.meta_data.FieldMetaData("emoji", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMAGE, new org.apache.thrift.meta_data.FieldMetaData("image", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.FILE, new org.apache.thrift.meta_data.FieldMetaData("file", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.SRC_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("srcUserId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DST_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("dstUserId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_GROUP_CHAT, new org.apache.thrift.meta_data.FieldMetaData("isGroupChat", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MessageInfo.class, metaDataMap);
  }

  public MessageInfo() {
  }

  public MessageInfo(
    long seqNo,
    MessageType type,
    int srcUserId,
    int dstUserId,
    boolean isGroupChat)
  {
    this();
    this.seqNo = seqNo;
    setSeqNoIsSet(true);
    this.type = type;
    this.srcUserId = srcUserId;
    setSrcUserIdIsSet(true);
    this.dstUserId = dstUserId;
    setDstUserIdIsSet(true);
    this.isGroupChat = isGroupChat;
    setIsGroupChatIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MessageInfo(MessageInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.seqNo = other.seqNo;
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetMessage()) {
      this.message = other.message;
    }
    if (other.isSetEmoji()) {
      this.emoji = other.emoji;
    }
    if (other.isSetImage()) {
      this.image = org.apache.thrift.TBaseHelper.copyBinary(other.image);
    }
    if (other.isSetFile()) {
      this.file = org.apache.thrift.TBaseHelper.copyBinary(other.file);
    }
    this.srcUserId = other.srcUserId;
    this.dstUserId = other.dstUserId;
    this.isGroupChat = other.isGroupChat;
  }

  public MessageInfo deepCopy() {
    return new MessageInfo(this);
  }

  @Override
  public void clear() {
    setSeqNoIsSet(false);
    this.seqNo = 0;
    this.type = null;
    this.message = null;
    this.emoji = null;
    this.image = null;
    this.file = null;
    setSrcUserIdIsSet(false);
    this.srcUserId = 0;
    setDstUserIdIsSet(false);
    this.dstUserId = 0;
    setIsGroupChatIsSet(false);
    this.isGroupChat = false;
  }

  public long getSeqNo() {
    return this.seqNo;
  }

  public MessageInfo setSeqNo(long seqNo) {
    this.seqNo = seqNo;
    setSeqNoIsSet(true);
    return this;
  }

  public void unsetSeqNo() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SEQNO_ISSET_ID);
  }

  /** Returns true if field seqNo is set (has been assigned a value) and false otherwise */
  public boolean isSetSeqNo() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SEQNO_ISSET_ID);
  }

  public void setSeqNoIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SEQNO_ISSET_ID, value);
  }

  /**
   * 
   * @see MessageType
   */
  public MessageType getType() {
    return this.type;
  }

  /**
   * 
   * @see MessageType
   */
  public MessageInfo setType(MessageType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public String getMessage() {
    return this.message;
  }

  public MessageInfo setMessage(String message) {
    this.message = message;
    return this;
  }

  public void unsetMessage() {
    this.message = null;
  }

  /** Returns true if field message is set (has been assigned a value) and false otherwise */
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  public String getEmoji() {
    return this.emoji;
  }

  public MessageInfo setEmoji(String emoji) {
    this.emoji = emoji;
    return this;
  }

  public void unsetEmoji() {
    this.emoji = null;
  }

  /** Returns true if field emoji is set (has been assigned a value) and false otherwise */
  public boolean isSetEmoji() {
    return this.emoji != null;
  }

  public void setEmojiIsSet(boolean value) {
    if (!value) {
      this.emoji = null;
    }
  }

  public byte[] getImage() {
    setImage(org.apache.thrift.TBaseHelper.rightSize(image));
    return image == null ? null : image.array();
  }

  public java.nio.ByteBuffer bufferForImage() {
    return org.apache.thrift.TBaseHelper.copyBinary(image);
  }

  public MessageInfo setImage(byte[] image) {
    this.image = image == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(image.clone());
    return this;
  }

  public MessageInfo setImage(java.nio.ByteBuffer image) {
    this.image = org.apache.thrift.TBaseHelper.copyBinary(image);
    return this;
  }

  public void unsetImage() {
    this.image = null;
  }

  /** Returns true if field image is set (has been assigned a value) and false otherwise */
  public boolean isSetImage() {
    return this.image != null;
  }

  public void setImageIsSet(boolean value) {
    if (!value) {
      this.image = null;
    }
  }

  public byte[] getFile() {
    setFile(org.apache.thrift.TBaseHelper.rightSize(file));
    return file == null ? null : file.array();
  }

  public java.nio.ByteBuffer bufferForFile() {
    return org.apache.thrift.TBaseHelper.copyBinary(file);
  }

  public MessageInfo setFile(byte[] file) {
    this.file = file == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(file.clone());
    return this;
  }

  public MessageInfo setFile(java.nio.ByteBuffer file) {
    this.file = org.apache.thrift.TBaseHelper.copyBinary(file);
    return this;
  }

  public void unsetFile() {
    this.file = null;
  }

  /** Returns true if field file is set (has been assigned a value) and false otherwise */
  public boolean isSetFile() {
    return this.file != null;
  }

  public void setFileIsSet(boolean value) {
    if (!value) {
      this.file = null;
    }
  }

  public int getSrcUserId() {
    return this.srcUserId;
  }

  public MessageInfo setSrcUserId(int srcUserId) {
    this.srcUserId = srcUserId;
    setSrcUserIdIsSet(true);
    return this;
  }

  public void unsetSrcUserId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SRCUSERID_ISSET_ID);
  }

  /** Returns true if field srcUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetSrcUserId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SRCUSERID_ISSET_ID);
  }

  public void setSrcUserIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SRCUSERID_ISSET_ID, value);
  }

  public int getDstUserId() {
    return this.dstUserId;
  }

  public MessageInfo setDstUserId(int dstUserId) {
    this.dstUserId = dstUserId;
    setDstUserIdIsSet(true);
    return this;
  }

  public void unsetDstUserId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DSTUSERID_ISSET_ID);
  }

  /** Returns true if field dstUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetDstUserId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DSTUSERID_ISSET_ID);
  }

  public void setDstUserIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DSTUSERID_ISSET_ID, value);
  }

  public boolean isIsGroupChat() {
    return this.isGroupChat;
  }

  public MessageInfo setIsGroupChat(boolean isGroupChat) {
    this.isGroupChat = isGroupChat;
    setIsGroupChatIsSet(true);
    return this;
  }

  public void unsetIsGroupChat() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISGROUPCHAT_ISSET_ID);
  }

  /** Returns true if field isGroupChat is set (has been assigned a value) and false otherwise */
  public boolean isSetIsGroupChat() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISGROUPCHAT_ISSET_ID);
  }

  public void setIsGroupChatIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISGROUPCHAT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SEQ_NO:
      if (value == null) {
        unsetSeqNo();
      } else {
        setSeqNo((Long)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((MessageType)value);
      }
      break;

    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((String)value);
      }
      break;

    case EMOJI:
      if (value == null) {
        unsetEmoji();
      } else {
        setEmoji((String)value);
      }
      break;

    case IMAGE:
      if (value == null) {
        unsetImage();
      } else {
        if (value instanceof byte[]) {
          setImage((byte[])value);
        } else {
          setImage((java.nio.ByteBuffer)value);
        }
      }
      break;

    case FILE:
      if (value == null) {
        unsetFile();
      } else {
        if (value instanceof byte[]) {
          setFile((byte[])value);
        } else {
          setFile((java.nio.ByteBuffer)value);
        }
      }
      break;

    case SRC_USER_ID:
      if (value == null) {
        unsetSrcUserId();
      } else {
        setSrcUserId((Integer)value);
      }
      break;

    case DST_USER_ID:
      if (value == null) {
        unsetDstUserId();
      } else {
        setDstUserId((Integer)value);
      }
      break;

    case IS_GROUP_CHAT:
      if (value == null) {
        unsetIsGroupChat();
      } else {
        setIsGroupChat((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SEQ_NO:
      return getSeqNo();

    case TYPE:
      return getType();

    case MESSAGE:
      return getMessage();

    case EMOJI:
      return getEmoji();

    case IMAGE:
      return getImage();

    case FILE:
      return getFile();

    case SRC_USER_ID:
      return getSrcUserId();

    case DST_USER_ID:
      return getDstUserId();

    case IS_GROUP_CHAT:
      return isIsGroupChat();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SEQ_NO:
      return isSetSeqNo();
    case TYPE:
      return isSetType();
    case MESSAGE:
      return isSetMessage();
    case EMOJI:
      return isSetEmoji();
    case IMAGE:
      return isSetImage();
    case FILE:
      return isSetFile();
    case SRC_USER_ID:
      return isSetSrcUserId();
    case DST_USER_ID:
      return isSetDstUserId();
    case IS_GROUP_CHAT:
      return isSetIsGroupChat();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MessageInfo)
      return this.equals((MessageInfo)that);
    return false;
  }

  public boolean equals(MessageInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_seqNo = true;
    boolean that_present_seqNo = true;
    if (this_present_seqNo || that_present_seqNo) {
      if (!(this_present_seqNo && that_present_seqNo))
        return false;
      if (this.seqNo != that.seqNo)
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    boolean this_present_emoji = true && this.isSetEmoji();
    boolean that_present_emoji = true && that.isSetEmoji();
    if (this_present_emoji || that_present_emoji) {
      if (!(this_present_emoji && that_present_emoji))
        return false;
      if (!this.emoji.equals(that.emoji))
        return false;
    }

    boolean this_present_image = true && this.isSetImage();
    boolean that_present_image = true && that.isSetImage();
    if (this_present_image || that_present_image) {
      if (!(this_present_image && that_present_image))
        return false;
      if (!this.image.equals(that.image))
        return false;
    }

    boolean this_present_file = true && this.isSetFile();
    boolean that_present_file = true && that.isSetFile();
    if (this_present_file || that_present_file) {
      if (!(this_present_file && that_present_file))
        return false;
      if (!this.file.equals(that.file))
        return false;
    }

    boolean this_present_srcUserId = true;
    boolean that_present_srcUserId = true;
    if (this_present_srcUserId || that_present_srcUserId) {
      if (!(this_present_srcUserId && that_present_srcUserId))
        return false;
      if (this.srcUserId != that.srcUserId)
        return false;
    }

    boolean this_present_dstUserId = true;
    boolean that_present_dstUserId = true;
    if (this_present_dstUserId || that_present_dstUserId) {
      if (!(this_present_dstUserId && that_present_dstUserId))
        return false;
      if (this.dstUserId != that.dstUserId)
        return false;
    }

    boolean this_present_isGroupChat = true;
    boolean that_present_isGroupChat = true;
    if (this_present_isGroupChat || that_present_isGroupChat) {
      if (!(this_present_isGroupChat && that_present_isGroupChat))
        return false;
      if (this.isGroupChat != that.isGroupChat)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(seqNo);

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + type.getValue();

    hashCode = hashCode * 8191 + ((isSetMessage()) ? 131071 : 524287);
    if (isSetMessage())
      hashCode = hashCode * 8191 + message.hashCode();

    hashCode = hashCode * 8191 + ((isSetEmoji()) ? 131071 : 524287);
    if (isSetEmoji())
      hashCode = hashCode * 8191 + emoji.hashCode();

    hashCode = hashCode * 8191 + ((isSetImage()) ? 131071 : 524287);
    if (isSetImage())
      hashCode = hashCode * 8191 + image.hashCode();

    hashCode = hashCode * 8191 + ((isSetFile()) ? 131071 : 524287);
    if (isSetFile())
      hashCode = hashCode * 8191 + file.hashCode();

    hashCode = hashCode * 8191 + srcUserId;

    hashCode = hashCode * 8191 + dstUserId;

    hashCode = hashCode * 8191 + ((isGroupChat) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(MessageInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSeqNo()).compareTo(other.isSetSeqNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSeqNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seqNo, other.seqNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmoji()).compareTo(other.isSetEmoji());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmoji()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emoji, other.emoji);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImage()).compareTo(other.isSetImage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.image, other.image);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFile()).compareTo(other.isSetFile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file, other.file);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSrcUserId()).compareTo(other.isSetSrcUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSrcUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srcUserId, other.srcUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDstUserId()).compareTo(other.isSetDstUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDstUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dstUserId, other.dstUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsGroupChat()).compareTo(other.isSetIsGroupChat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsGroupChat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isGroupChat, other.isGroupChat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MessageInfo(");
    boolean first = true;

    sb.append("seqNo:");
    sb.append(this.seqNo);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (isSetMessage()) {
      if (!first) sb.append(", ");
      sb.append("message:");
      if (this.message == null) {
        sb.append("null");
      } else {
        sb.append(this.message);
      }
      first = false;
    }
    if (isSetEmoji()) {
      if (!first) sb.append(", ");
      sb.append("emoji:");
      if (this.emoji == null) {
        sb.append("null");
      } else {
        sb.append(this.emoji);
      }
      first = false;
    }
    if (isSetImage()) {
      if (!first) sb.append(", ");
      sb.append("image:");
      if (this.image == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.image, sb);
      }
      first = false;
    }
    if (isSetFile()) {
      if (!first) sb.append(", ");
      sb.append("file:");
      if (this.file == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.file, sb);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("srcUserId:");
    sb.append(this.srcUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dstUserId:");
    sb.append(this.dstUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isGroupChat:");
    sb.append(this.isGroupChat);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'seqNo' because it's a primitive and you chose the non-beans generator.
    if (type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'srcUserId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'dstUserId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'isGroupChat' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MessageInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MessageInfoStandardScheme getScheme() {
      return new MessageInfoStandardScheme();
    }
  }

  private static class MessageInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<MessageInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MessageInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SEQ_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.seqNo = iprot.readI64();
              struct.setSeqNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = MessageType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.message = iprot.readString();
              struct.setMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EMOJI
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.emoji = iprot.readString();
              struct.setEmojiIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IMAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.image = iprot.readBinary();
              struct.setImageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.file = iprot.readBinary();
              struct.setFileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SRC_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.srcUserId = iprot.readI32();
              struct.setSrcUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DST_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dstUserId = iprot.readI32();
              struct.setDstUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // IS_GROUP_CHAT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isGroupChat = iprot.readBool();
              struct.setIsGroupChatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetSeqNo()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'seqNo' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSrcUserId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'srcUserId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDstUserId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'dstUserId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetIsGroupChat()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'isGroupChat' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MessageInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SEQ_NO_FIELD_DESC);
      oprot.writeI64(struct.seqNo);
      oprot.writeFieldEnd();
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.message != null) {
        if (struct.isSetMessage()) {
          oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
          oprot.writeString(struct.message);
          oprot.writeFieldEnd();
        }
      }
      if (struct.emoji != null) {
        if (struct.isSetEmoji()) {
          oprot.writeFieldBegin(EMOJI_FIELD_DESC);
          oprot.writeString(struct.emoji);
          oprot.writeFieldEnd();
        }
      }
      if (struct.image != null) {
        if (struct.isSetImage()) {
          oprot.writeFieldBegin(IMAGE_FIELD_DESC);
          oprot.writeBinary(struct.image);
          oprot.writeFieldEnd();
        }
      }
      if (struct.file != null) {
        if (struct.isSetFile()) {
          oprot.writeFieldBegin(FILE_FIELD_DESC);
          oprot.writeBinary(struct.file);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(SRC_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.srcUserId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DST_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.dstUserId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_GROUP_CHAT_FIELD_DESC);
      oprot.writeBool(struct.isGroupChat);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MessageInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MessageInfoTupleScheme getScheme() {
      return new MessageInfoTupleScheme();
    }
  }

  private static class MessageInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<MessageInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MessageInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI64(struct.seqNo);
      oprot.writeI32(struct.type.getValue());
      oprot.writeI32(struct.srcUserId);
      oprot.writeI32(struct.dstUserId);
      oprot.writeBool(struct.isGroupChat);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetMessage()) {
        optionals.set(0);
      }
      if (struct.isSetEmoji()) {
        optionals.set(1);
      }
      if (struct.isSetImage()) {
        optionals.set(2);
      }
      if (struct.isSetFile()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetMessage()) {
        oprot.writeString(struct.message);
      }
      if (struct.isSetEmoji()) {
        oprot.writeString(struct.emoji);
      }
      if (struct.isSetImage()) {
        oprot.writeBinary(struct.image);
      }
      if (struct.isSetFile()) {
        oprot.writeBinary(struct.file);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MessageInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.seqNo = iprot.readI64();
      struct.setSeqNoIsSet(true);
      struct.type = MessageType.findByValue(iprot.readI32());
      struct.setTypeIsSet(true);
      struct.srcUserId = iprot.readI32();
      struct.setSrcUserIdIsSet(true);
      struct.dstUserId = iprot.readI32();
      struct.setDstUserIdIsSet(true);
      struct.isGroupChat = iprot.readBool();
      struct.setIsGroupChatIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.message = iprot.readString();
        struct.setMessageIsSet(true);
      }
      if (incoming.get(1)) {
        struct.emoji = iprot.readString();
        struct.setEmojiIsSet(true);
      }
      if (incoming.get(2)) {
        struct.image = iprot.readBinary();
        struct.setImageIsSet(true);
      }
      if (incoming.get(3)) {
        struct.file = iprot.readBinary();
        struct.setFileIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

